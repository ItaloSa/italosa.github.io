{"version":3,"sources":["components/styles.js","components/Navbar/styles.js","components/Navbar/index.js","components/Hero/styles.js","components/Github/index.js","components/Hero/index.js","App.js","serviceWorker.js","index.js"],"names":["CustomSection","styled","section","props","dark","CustomContainer","Container","CustomNavbar","Navbar","CustomNavbarToggler","NavbarToggler","AppNavbar","useState","isOpen","setIsOpen","expand","NavbarBrand","href","className","onClick","Collapse","navbar","Nav","NavItem","NavLink","target","process","HeroHeader","Row","Avatar","Media","GithubBio","profileInfo","setProfileInfo","followers","following","public_repos","useEffect","getData","a","fetch","response","json","data","Col","rel","name","Hero","md","Github","object","src","alt","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ohBAGO,IAKMA,EAAgBC,IAAOC,QAAV,IACJ,SAAAC,GAAK,OAAIA,EAAMC,KAHX,UAHG,YAShBC,EAAkBJ,YAAOK,IAAPL,CAAH,K,iRCRrB,IAAMM,EAAeN,YAAOO,IAAPP,CAAH,IDEC,WCGbQ,EAAsBR,YAAOS,IAAPT,CAAH,KCuBjBU,EA1BG,WAAO,IAAD,EACMC,oBAAS,GADf,mBACfC,EADe,KACPC,EADO,KAEtB,OACE,6BACE,kBAACP,EAAD,CAAcH,MAAI,EAACW,OAAO,MACxB,kBAACT,EAAA,EAAD,KACE,kBAACU,EAAA,EAAD,CAAaC,KAAK,IAAIC,UAAU,gBAC7B,IADH,iBAEc,KAEd,kBAACT,EAAD,CAAqBU,QAAS,kBAAML,GAAWD,MAC/C,kBAACO,EAAA,EAAD,CAAUP,OAAQA,EAAQQ,QAAM,GAC9B,kBAACC,EAAA,EAAD,CAAKJ,UAAU,UAAUG,QAAM,GAC7B,kBAACE,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAASC,OAAO,SAASR,KAhBRS,8BAgBjB,iB,sOCjBT,IAAMC,EAAa1B,YAAO2B,IAAP3B,CAAH,KAIV4B,EAAS5B,YAAO6B,IAAP7B,CAAH,K,0CC2BJ8B,EA3BG,WAAO,IAAD,EACgBnB,mBAAS,IADzB,mBACfoB,EADe,KACFC,EADE,OAEqCD,EAAnDE,iBAFc,MAEF,EAFE,IAEqCF,EAApCG,iBAFD,MAEa,EAFb,IAEqCH,EAArBI,oBAFhB,MAE+B,EAF/B,EAItBC,oBAAU,WACRC,KACC,IAEH,IAAMA,EAAO,sCAAG,8BAAAC,EAAA,qEACSC,MAAM,GAAD,OAXKd,yBAWL,mBADd,cACRe,EADQ,gBAEKA,EAASC,OAFd,OAERC,EAFQ,OAGdV,EAAeU,GAHD,yCAAH,qDAMb,OACE,kBAACf,EAAA,EAAD,CAAKV,UAAU,QACb,kBAAC0B,EAAA,EAAD,CAAK1B,UAAU,mBACb,uBAAGO,OAAO,SAASR,KAAI,UApBES,6BAoBF,kBAA2CmB,IAAI,uBAAsB,wCAAcX,IAC1G,uBAAGhB,UAAU,OAAOO,OAAO,SAASR,KAAI,UArBfS,6BAqBe,kBAA2CmB,IAAI,uBAAsB,wCAAcV,IAC3H,uBAAGjB,UAAU,OAAOO,OAAO,SAASR,KAAI,UAtBfS,6BAsBe,qBAA8CmB,IAAI,uBAAsB,oCAAUT,IAC1H,uBAAGlB,UAAU,QAAQ,OACrB,uBAAGA,UAAU,OAAOO,OAAO,SAASR,KAxBXS,6BAwBuCmB,IAAI,uBAAsB,kBAAC,IAAD,CAAMC,KAAK,eCE9FC,EAvBF,WACX,OACE,kBAAC/C,EAAD,CAAeI,MAAI,GACjB,kBAACC,EAAD,KACE,kBAACsB,EAAD,KACE,kBAACiB,EAAA,EAAD,CAAKI,GAAG,KACN,kDACA,4CACA,mLACA,kBAACC,EAAD,OAEF,kBAACL,EAAA,EAAD,CAAKI,GAAG,KACN,yBAAK9B,UAAU,iCACb,kBAACW,EAAD,CAAQqB,QAAM,EAACC,IAAI,0DAA0DC,IAAI,sBCNhFC,EATH,WACV,OACE,oCACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBCTNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.222bedd5.chunk.js","sourcesContent":["import styled from 'styled-components';\nimport { Container } from 'reactstrap';\n\nexport const COLOR_PRIMARY = '#ffffff';\nexport const COLOR_SECONDARY = '#333';\nexport const COLOR_LIGHT = '#7d7d7d';\nexport const COLOR_DARK = '#262626';\n\nexport const CustomSection = styled.section`\n  background-color: ${props => props.dark ? COLOR_DARK : COLOR_PRIMARY}\n`;\n\nexport const CustomContainer = styled(Container)`\n  padding: 20px;\n  max-width: 640px !important;\n`;\n","import styled from 'styled-components';\nimport { Navbar, NavbarToggler } from 'reactstrap';\nimport { COLOR_DARK } from '../styles';\n\nexport const CustomNavbar = styled(Navbar)`\n  background-color: ${COLOR_DARK};\n  box-shadow: 0 1px 6px rgba(0,0,0,0.12), 0 1px 5px rgba(0,0,0,0.24);\n`;\n\nexport const CustomNavbarToggler = styled(NavbarToggler)`\n  border-color: #fff !important;\n`;","import React, { useState } from 'react';\nimport { Container, Collapse, Nav, NavItem, NavLink, NavbarBrand } from 'reactstrap';\n\nimport { CustomNavbar, CustomNavbarToggler } from './styles';\nconst { REACT_APP_GITHUB_URL } = process.env;\n\nconst AppNavbar = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  return (\n    <div>\n      <CustomNavbar dark expand=\"md\">\n        <Container>\n          <NavbarBrand href=\"#\" className=\"navbar-brand\">\n            {' '}\n            Ítalo Sousa{' '}\n          </NavbarBrand>\n          <CustomNavbarToggler onClick={() => setIsOpen(!isOpen)} />\n          <Collapse isOpen={isOpen} navbar>\n            <Nav className=\"ml-auto\" navbar>\n              <NavItem>\n                <NavLink target=\"_blank\" href={REACT_APP_GITHUB_URL}>\n                  GitHub\n                </NavLink>\n              </NavItem>\n            </Nav>\n          </Collapse>\n        </Container>\n      </CustomNavbar>\n    </div>\n  );\n};\n\nexport default AppNavbar;\n","import styled from 'styled-components';\nimport { Row, Media } from 'reactstrap';\n\nexport const HeroHeader = styled(Row)`\n  padding-bottom: 20px;\n`;\n\nexport const Avatar = styled(Media)`\n  width: 80%;\n  border-radius: 100%;\n`;\n\n\n","import React, { useState, useEffect } from 'react';\nimport { Row, Col } from 'reactstrap';\nimport Icon from 'react-simple-icons'\n\nconst { REACT_APP_GITHUB_URL } = process.env;\nconst { REACT_APP_GITHUB_API_URL } = process.env;\n\nconst GithubBio = () => {\n  const [profileInfo, setProfileInfo] = useState({});\n  const { followers = 0, following = 0, public_repos = 0 } = profileInfo;\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const getData = async () => {\n    const response = await fetch(`${REACT_APP_GITHUB_API_URL}/users/italosa`);\n    const data = await response.json();\n    setProfileInfo(data);\n  }\n\n  return (\n    <Row className=\"mt-4\">\n      <Col className=\"d-flex flex-row\">\n        <a target=\"_blank\" href={`${REACT_APP_GITHUB_URL}?tab=followers`} rel=\"noopener noreferrer\"><p>Followers {followers}</p></a>\n        <a className=\"ml-3\" target=\"_blank\" href={`${REACT_APP_GITHUB_URL}?tab=following`} rel=\"noopener noreferrer\"><p>Following {following}</p></a>\n        <a className=\"ml-3\" target=\"_blank\" href={`${REACT_APP_GITHUB_URL}?tab=repositories`} rel=\"noopener noreferrer\"><p>Repos {public_repos}</p></a>\n        <p className=\"ml-3\">{' - '}</p>\n        <a className=\"ml-3\" target=\"_blank\" href={REACT_APP_GITHUB_URL} rel=\"noopener noreferrer\"><Icon name=\"github\" /></a>\n      </Col> \n    </Row>\n  );\n};\n\nexport default GithubBio;\n","import React from 'react';\nimport { Col } from 'reactstrap';\nimport { HeroHeader, Avatar } from './styles';\nimport { CustomSection, CustomContainer } from '../styles';\n\nimport Github from '../Github';\n\nconst Hero = () => {\n  return (\n    <CustomSection dark>\n      <CustomContainer>\n        <HeroHeader>\n          <Col md=\"9\">\n            <h1> Hi, I'm Ítalo </h1>\n            <p>I ❤ code</p>\n            <h4>Passionate about the incredible world of software development, always seeking to develop and learn technologies that can positively impact society.</h4>\n            <Github />\n          </Col>\n          <Col md=\"3\">\n            <div className=\"d-flex justify-content-center\">\n              <Avatar object src=\"https://avatars2.githubusercontent.com/u/28374391?s=200\" alt=\"Italo Sousa\"/>\n            </div>\n          </Col>\n        </HeroHeader>\n\n      </CustomContainer>\n    </CustomSection>\n  );\n}\n\nexport default Hero;\n","import React from 'react';\n\nimport Navbar from './components/Navbar';\nimport Hero from './components/Hero';\n\nconst App = () => {\n  return(\n    <>\n    <Navbar />\n    <Hero />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'circular-std';\nimport './style.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}